# Workflow preprocesses WGS sequences in FASTQ or BAM, then
# runs original PCAWG BWA-MEM alignment, different QC metrics are 
# also collected at convenient steps

workflow:
  name:  bwa-mem-wgs-aligner
  version: "0.0.2"

  input:
    metadata_yaml:
      type: string
      is_file: true
    picard_jar:
      type: string
      is_file: true
      default: "[picard.jar](https://github.com/broadinstitute/picard/releases/download/2.18.16/picard.jar)"
    reference_gz_amb:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.amb](https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.amb)"
    reference_gz_sa:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.sa](https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.sa)"
    reference_gz_pac:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.pac](https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.pac)"
    reference_gz_ann:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.ann](https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.ann)"
    reference_gz_bwt:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.bwt](https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.bwt)"
    reference_gz_fai:
      type: string
      is_file: true
      default: "[genome.fa.gz.fai](https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.fai)"
    reference_gz:
      type: string
      is_file: true
      default: "[genome.fa.gz](https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz)"

  tasks:
    gen_lane_bam:
      tool: gen_lane_bam
      input:
        metadata_yaml: metadata_yaml

    parallel_qc:
      scatter:
        input:
          lane_bam:
            with_items: bams@gen_lane_bam
      tasks:
        lane_bam_qc:
          tool: lane_bam_qc
          input:
            lane_bam: lane_bam
            picard_jar: picard_jar

    pcawg_aligner:
      tool: pcawg_aligner
      input:
        lane_bams: bams@gen_lane_bam
        reference_gz_amb: reference_gz_amb
        reference_gz_sa: reference_gz_sa
        reference_gz_pac: reference_gz_pac
        reference_gz_ann: reference_gz_ann
        reference_gz_bwt: reference_gz_bwt
        reference_gz_fai: reference_gz_fai
        reference_gz: reference_gz

    aligned_bam_qc:
      tool: aligned_bam_qc
      input:
        picard_jar: picard_jar
        aligned_bam: merged_output_bam@pcawg_aligner
        reference_sequence: reference_gz  # may need unzipped version

    aligned_bam_oxog_metrics:
      tool: aligned_bam_oxog_metrics
      input:
        picard_jar: picard_jar
        aligned_bam: merged_output_bam@pcawg_aligner
        reference_sequence: reference_gz  # may need unzipped version

    # may add more QCs if needed
    # need add SONG/SCORE upload later

# A workflow is made up with one or more tools
# Each tool can have its own docker imagine if desirable
tools:
  gen_lane_bam:
    command: gen_lane_bam.py ${metadata_yaml}
    input:
      metadata_yaml:
        type: string
        is_file: true
    output:
      bams:
        type: array
        items:
          type: string
          is_file: true
          glob_pattern: "*.bam"

  lane_bam_qc:
    command: |
      java -jar ${picard_jar} CollectQualityYieldMetrics \
        I=${lane_bam} \
        O=${lane_bam}.quality_yield_metrics.txt
    input:
      picard_jar:
        type: string
        is_file: true
      lane_bam:
        type: string
        is_file: true
    output:
      metrics:
        type: string
        is_file: true
        value: ${lane_bam}.quality_yield_metrics.txt

  pcawg_aligner:  # this is really a PCAWG BWA-MEM CWL workflow wrapper
    command: |
      pcawg_aligner.py --bams ${sep=',' lane_bams} \
        --output_dir ${output_dir} \
        --output_file_basename ${output_file_basename} \
        --download_reference_files ${download_reference_files} \
        --reference_gz_amb ${reference_gz_amb} \
        --reference_gz_sa ${reference_gz_sa} \
        --reference_gz_pac ${reference_gz_pac} \
        --reference_gz_ann ${reference_gz_ann} \
        --reference_gz_bwt ${reference_gz_bwt} \
        --reference_gz_fai ${reference_gz_fai} \
        --reference_gz ${reference_gz}
    input:
      lane_bams:
        type: array
        items:
          type: string
          is_file: true
      output_dir:
        type: string
        default: datastore  # default value
      output_file_basename:
        type: string
        default: ${uuid()}  # default ramdon uuid
      download_reference_files:
        type: boolean
        default: true
      reference_gz_amb:
        type: string
        is_file: true
      reference_gz_sa:
        type: string
        is_file: true
      reference_gz_pac:
        type: string
        is_file: true
      reference_gz_ann:
        type: string
        is_file: true
      reference_gz_bwt:
        type: string
        is_file: true
      reference_gz_fai:
        type: string
        is_file: true
      reference_gz:
        type: string
        is_file: true
    output:
      merged_output_bam:
        type: string
        is_file: true
        value: "${output_file_basename}.bam"
      merged_output_bai:
        type: string
        is_file: true
        value: "${output_file_basename}.bam.bai"
      merged_output_metrics:
        type: string
        is_file: true
        value: "${output_file_basename}.bam.metrics"
      merged_output_stats:
        type: string
        is_file: true
        value: "${output_file_basename}.bam.stats.txt"

  aligned_bam_qc:
    command: |
      java -jar ${picard_jar} CollectMultipleMetrics \
        I=${aligned_bam} \
        O=multiple_metrics \
        R=${reference_sequence} \
        METRIC_ACCUMULATION_LEVEL=READ_GROUP \
        PROGRAM=CollectAlignmentSummaryMetrics \
        PROGRAM=CollectInsertSizeMetrics \
        PROGRAM=QualityScoreDistribution \
        PROGRAM=MeanQualityByCycle \
        PROGRAM=CollectBaseDistributionByCycle \
        PROGRAM=CollectGcBiasMetrics \
        PROGRAM=CollectSequencingArtifactMetrics \
        PROGRAM=CollectQualityYieldMetrics
    input:
      picard_jar:
        type: string
        is_file: true
      aligned_bam:
        type: string
      reference_sequence:
        type: string
        is_file: true
    output:
      metrics_files:
        type: array
        items:
          type: string
          is_file: true
          glob_pattern: "multiple_metrics*.txt"

  aligned_bam_oxog_metrics:
    command: |
      java -jar ${picard_jar} CollectOxoGMetrics \
        I=${aligned_bam} \
        O=oxoG_metrics.txt \
        R=${reference_sequence}
    input:
      picard_jar:
        type: string
        is_file: true
      aligned_bam:
        type: string
      reference_sequence:
        type: string
        is_file: true
