# Workflow preprocesses WGS sequences in FASTQ or BAM, then
# runs original PCAWG BWA-MEM alignment, different QC metrics are 
# also collected at convenient steps

workflow:
  name:  bwa-mem-wgs-aligner
  version: "0.0.13"

  env_var:
    SCORE_TOKEN:
      type: string
      is_required: true
    SONG_TOKEN:
      type: string
      is_required: true
  input:
    metadata_yaml:
      type: string
      is_file: true
      is_required: true
    picard_jar:
      type: string
      is_file: true
      default: "[picard.jar]https://github.com/broadinstitute/picard/releases/download/2.18.16/picard.jar"
    pcawg_aligner_dockstore_url:
      type: string
      is_file: true
      default: "[pcawg-bwa-mem.cwl]https://dockstore.org/api/api/ga4gh/v2/tools/quay.io%2Fpancancer%2Fpcawg-bwa-mem-workflow/versions/2.6.8_1.4/plain-CWL/descriptor/Dockstore.cwl"
    reference_gz_amb:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.amb]https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.amb"
    reference_gz_sa:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.sa]https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.sa"
    reference_gz_pac:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.pac]https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.pac"
    reference_gz_ann:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.ann]https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.ann"
    reference_gz_bwt:
      type: string
      is_file: true
      default: "[genome.fa.gz.64.bwt]https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.64.bwt"
    reference_gz_fai:
      type: string
      is_file: true
      default: "[genome.fa.gz.fai]https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz.fai"
    reference_gz:
      type: string
      is_file: true
      default: "[genome.fa.gz]https://dcc.icgc.org/api/v1/download?fn=/PCAWG/reference_data/pcawg-bwa-mem/genome.fa.gz"

  tasks:
    gen_lane_bam:
      tool: gen_lane_bam
      input:
        metadata_yaml: metadata_yaml
        picard_jar: picard_jar

    lane_bam_qc:
      tool: lane_bam_qc
      input:
        lane_bams: bams@gen_lane_bam
        picard_jar: picard_jar

    pcawg_aligner:
      tool: pcawg_aligner
      input:
        cwl_file: pcawg_aligner_dockstore_url
        lane_bams: bams@gen_lane_bam
        reference_gz_amb: reference_gz_amb
        reference_gz_sa: reference_gz_sa
        reference_gz_pac: reference_gz_pac
        reference_gz_ann: reference_gz_ann
        reference_gz_bwt: reference_gz_bwt
        reference_gz_fai: reference_gz_fai
        reference_gz: reference_gz

    aligned_bam_qc:
      tool: aligned_bam_qc
      input:
        picard_jar: picard_jar
        aligned_bam: merged_output_bam@pcawg_aligner
        reference_sequence: reference_gz  # may need unzipped version

    aligned_bam_oxog_metrics:
      tool: aligned_bam_oxog_metrics
      input:
        picard_jar: picard_jar
        aligned_bam: merged_output_bam@pcawg_aligner
        reference_sequence: reference_gz  # may need unzipped version

    # may add more QCs if needed
    # need add SONG/SCORE upload later

# A workflow is made up with one or more tools
# Each tool can have its own docker imagine if desirable
tools:
  gen_lane_bam:
    command: gen_lane_bam.py ${metadata_yaml} ${picard_jar}
    input:
      metadata_yaml:
        type: string
        is_file: true
      picard_jar:
        type: string
        is_file: true
    output:
      bams:
        type: array
        items:
          type: string
          is_file: true
          glob_pattern: "*.bam"

  lane_bam_qc:
    command: |
      python -c '
      import sys
      import json
      import subprocess
      lane_bams = sys.argv[1].split(",")

      metrics = []
      for bam in lane_bams:
        metrics_file = "%s.quality_yield_metrics.txt" % bam
        command = "java -jar ${picard_jar} CollectQualityYieldMetrics I=%s O=%s" % (bam, metrics_file)
        try:
          p = subprocess.Popen([command], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
          stdout, stderr = p.communicate()
        except Exception as e:
          exit(stderr)
        metrics.append(metrics_file)

      print(json.dumps({
        "metrics": metrics
      }))

      ' ${sep=',' lane_bams} > output.json 2> std.err

    input:
      picard_jar:
        type: string
        is_file: true
      lane_bams:
        type: array
        items:
          type: string
          is_file: true
    output:
      metrics:
        type: array
        items:
          type: string
          is_file: true
          glob_pattern: "*.quality_yield_metrics.txt"

  pcawg_aligner:  # this is really a PCAWG BWA-MEM CWL workflow wrapper
    command: |
      dockstore_cwl_runner.py --cwl_file ${cwl_file} \
        --reads ${sep=' ' lane_bams} \
        --output_dir datastore \
        --output_file_basename pcawg2-wgs \
        --reference_gz_amb ${reference_gz_amb} \
        --reference_gz_sa ${reference_gz_sa} \
        --reference_gz_pac ${reference_gz_pac} \
        --reference_gz_ann ${reference_gz_ann} \
        --reference_gz_bwt ${reference_gz_bwt} \
        --reference_gz_fai ${reference_gz_fai} \
        --reference_gz ${reference_gz}
    input:
      cwl_file:
        type: string
        is_file: true
      lane_bams:
        type: array
        items:
          type: string
          is_file: true
      reference_gz_amb:
        type: string
        is_file: true
      reference_gz_sa:
        type: string
        is_file: true
      reference_gz_pac:
        type: string
        is_file: true
      reference_gz_ann:
        type: string
        is_file: true
      reference_gz_bwt:
        type: string
        is_file: true
      reference_gz_fai:
        type: string
        is_file: true
      reference_gz:
        type: string
        is_file: true
    output:  # output section is ignored for now
      merged_output_bam:
        type: string
        is_file: true
        value: "${output_file_basename}.bam"
      merged_output_bai:
        type: string
        is_file: true
        value: "${output_file_basename}.bam.bai"
      merged_output_metrics:
        type: string
        is_file: true
        value: "${output_file_basename}.bam.metrics"
      merged_output_stats:
        type: string
        is_file: true
        value: "${output_file_basename}.bam.stats.txt"

  aligned_bam_qc:  # this requires RScript, install it by 'apt install r-base-core'
    command: |
      java -Xms5000m -jar ${picard_jar} CollectMultipleMetrics \
        I=${aligned_bam} \
        O=multiple_metrics \
        R=${reference_sequence} \
        ASSUME_SORTED=true \
        PROGRAM="null" \
        PROGRAM=CollectBaseDistributionByCycle \
        PROGRAM=CollectAlignmentSummaryMetrics \
        PROGRAM=CollectInsertSizeMetrics \
        PROGRAM=MeanQualityByCycle \
        PROGRAM=QualityScoreDistribution \
        PROGRAM=CollectSequencingArtifactMetrics \
        PROGRAM=CollectQualityYieldMetrics \
        METRIC_ACCUMULATION_LEVEL="null" \
        METRIC_ACCUMULATION_LEVEL="ALL_READS" \
        METRIC_ACCUMULATION_LEVEL="SAMPLE" \
        METRIC_ACCUMULATION_LEVEL="LIBRARY" \
        METRIC_ACCUMULATION_LEVEL="READ_GROUP"
    input:
      picard_jar:
        type: string
        is_file: true
      aligned_bam:
        type: string
      reference_sequence:
        type: string
        is_file: true
    output:
      metrics_files:
        type: array
        items:
          type: string
          is_file: true
          glob_pattern: "multiple_metrics*.txt"

  aligned_bam_oxog_metrics:
    command: |
      java -jar ${picard_jar} CollectOxoGMetrics \
        I=${aligned_bam} \
        O=oxoG_metrics.txt \
        R=${reference_sequence}
    input:
      picard_jar:
        type: string
        is_file: true
      aligned_bam:
        type: string
      reference_sequence:
        type: string
        is_file: true
